require('dotenv').config();
const express = require('express');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const session = require('express-session');
const app = express();
const PORT = process.env.PORT || 3000;
const cron = require("node-cron");
const { createClient } = require('@supabase/supabase-js');
const NodeCache = require('node-cache');
const cache = new NodeCache({
  stdTTL: 300, // –ö—ç—à –∂–∏–≤—ë—Ç 5 –º–∏–Ω—É—Ç
  checkperiod: 120, // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
});

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY // –Ω–∞ –±—ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º service_role
);

app.use(express.static('public'));
app.use(express.json());
app.use(session({
  secret: process.env.SESSION_SECRET || 'some secret here',
  resave: false,
  saveUninitialized: true,
}));

let osuAccessToken = null;
let osuTokenExpiry = 0;

const osuClientId = process.env.OSU_CLIENT_ID;
const osuClientSecret = process.env.OSU_CLIENT_SECRET;
const redirectUri = process.env.REDIRECT_URI || 'https://xn--80aea7bebb7e.xn--p1ai/auth/callback';

async function fetchOsuAccessToken() {
  try {
    const response = await axios.post('https://osu.ppy.sh/oauth/token', {
      client_id: osuClientId,
      client_secret: osuClientSecret,
      grant_type: 'client_credentials',
      scope: 'public',
    });

    osuAccessToken = response.data.access_token;
    osuTokenExpiry = Date.now() + (response.data.expires_in * 1000); // –æ–±—ã—á–Ω–æ 3600 —Å–µ–∫
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.response?.data || error.message);
  }
}

async function getOsuAccessToken() {
  if (!osuAccessToken || Date.now() > osuTokenExpiry - 60000) { // –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞ –º–∏–Ω—É—Ç—É –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    await fetchOsuAccessToken();
  }
  return osuAccessToken;
}

function calculatePoints(ppStart, ppEnd) {
  const start = Math.floor(ppStart);
  const end = Math.floor(ppEnd);

  if (end <= start) return 0;

  let points = 0;
  const floorStart = Math.floor(start / 1000) * 1000;
  const floorEnd = Math.floor(end / 1000) * 1000;

  for (let thousand = floorStart; thousand <= floorEnd; thousand += 1000) {
    const lower = Math.max(start, thousand);
    const upper = Math.min(end, thousand + 999.999);
    const delta = upper - lower;

    if (delta > 0) {
      const multiplier = thousand / 1000;
      points += delta * multiplier;
    }
  }

  return Math.round(points);
}

async function updatePositionsInDB() {
  try {
    const { data: participants, error: selectErr } = await supabase
      .from('participants')
      .select('*');

    if (selectErr) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π:', selectErr);
      return [];
    }

    participants.sort((a, b) => {
      const pa = parseFloat(a.points) || 0;
      const pb = parseFloat(b.points) || 0;

      if (pb !== pa) return pb - pa; 

      const dateA = new Date(a.participation_date);
      const dateB = new Date(b.participation_date);
      return dateA - dateB; 
    });

    let lastPoints = null;
    let lastDate = null;
    let lastPosition = 0;
    const updates = [];

    for (let i = 0; i < participants.length; i++) {
      const p = participants[i];
      const pPoints = parseFloat(p.points) || 0;
      const pDate = new Date(p.participation_date);

      if (pPoints !== lastPoints || pDate.getTime() !== lastDate?.getTime()) {
        lastPosition = i + 1;
        lastPoints = pPoints;
        lastDate = pDate;
      }

      const currentPos = p.position === null || p.position === undefined ? null : Number(p.position);
      if (currentPos !== lastPosition) {
        updates.push(
          supabase
            .from('participants')
            .update({ position: lastPosition })
            .eq('userid', p.userid)
        );
      }
      p.position = lastPosition;
    }

    if (updates.length > 0) {
      const results = await Promise.all(updates);
      for (const r of results) {
        if (r.error) console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', r.error);
      }
    }

    return participants;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ updatePositionsInDB:', err);
    return [];
  }
}

async function updateParticipantsPP() {
  try {
    const { data: participants, error } = await supabase
      .from("participants")
      .select("*");

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", error);
      return;
    }

    const token = await getOsuAccessToken();

    for (let participant of participants) {
      try {
        // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PP –∏ –ø–æ–∏–Ω—Ç–æ–≤)
        const res = await axios.get(
          `https://osu.ppy.sh/api/v2/users/${participant.userid}/osu`,
          { headers: { Authorization: `Bearer ${token}` } }
        );

        const currentPP = res.data.statistics.pp;
        const points = calculatePoints(
          parseFloat(participant.ppstart),
          parseFloat(currentPP)
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await supabase
          .from("participants")
          .update({
            ppend: currentPP,
            points: points
          })
          .eq("userid", participant.userid);

        // 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –µ–≥–æ top-200 —Å–∫–æ—Ä–±–æ—Ä–¥
        let allScores = [];
        for (let offset of [0, 100]) {
          const scoresRes = await axios.get(
            `https://osu.ppy.sh/api/v2/users/${participant.userid}/scores/best?mode=osu&limit=100&offset=${offset}`,
            { headers: { Authorization: `Bearer ${token}` } }
          );
          allScores = allScores.concat(scoresRes.data);
        }

        // 3Ô∏è‚É£ –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Å–∫–æ—Ä—ã, —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—á–∞—Å—Ç–∏—è
        const joinDate = new Date(participant.participation_date);
        const weekAgo = new Date();
        weekAgo.setDate(weekAgo.getDate() - 7); // –æ–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é

        const filteredScores = allScores.filter(score => {
          const createdAt = new Date(score.created_at);
          return createdAt >= joinDate && createdAt >= weekAgo;
        });

        // 4Ô∏è‚É£ –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –ø–æ PP –Ω–∞ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ
        const bestScoresByMap = {};
        for (const s of filteredScores) {
          const id = s.beatmap.id;
          if (!bestScoresByMap[id] || s.pp > bestScoresByMap[id].pp) {
            bestScoresByMap[id] = s;
          }
        }

        // 5Ô∏è‚É£ –ì–æ—Ç–æ–≤–∏–º –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î
        const insertData = Object.values(bestScoresByMap).map(score => ({
          userid: participant.userid,
          score_id: score.id,
          score_pp: score.pp,
          pp_gain: score.pp,
          beatmap_id: score.beatmap.id,
          beatmap_title: `${score.beatmapset.title} [${score.beatmap.version}]`,
          beatmap_bg: score.beatmapset.covers["cover@2x"],
          created_at: score.created_at
        }));

        // 6Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–≥—Ä–æ–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é,
        // —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–∫–æ—Ä–æ–≤ –ø–æ –∫–∞—Ä—Ç–∞–º
        const deleteSince = weekAgo.toISOString();
        await supabase
          .from("participant_scores")
          .delete()
          .eq("userid", participant.userid)
          .gte("created_at", deleteSince);

        // 7Ô∏è‚É£ –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ª—É—á—à–∏–µ —Å–∫–æ—Ä—ã
        if (insertData.length > 0) {
          const { error: insertErr } = await supabase
            .from("participant_scores")
            .insert(insertData);

          if (insertErr) {
            console.error("–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å–∫–æ—Ä–æ–≤:", insertErr);
          } else {
            console.log(`‚úÖ ${participant.nickname}: ${insertData.length} –ª—É—á—à–∏—Ö —Å–∫–æ—Ä(–æ–≤) –∑–∞ –Ω–µ–¥–µ–ª—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
          }
        }

      } catch (err) {
        console.error(
          `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${participant.nickname}:`,
          err.response?.data || err.message
        );
      }
    }

    await updatePositionsInDB();
    console.log("‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –ª—É—á—à–∏–µ —Å–∫–æ—Ä—ã –∑–∞ –Ω–µ–¥–µ–ª—é –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ updateParticipantsPP:", err);
  }
}

async function verifyAndFixPlayerStats(userIds = null) {
  try {
    let allPlayers = [];
    if (!userIds) {
      const { data: players, error } = await supabase.from('players').select('*');
      if (error) throw error;
      allPlayers = players || [];
    } else {
      const { data: players, error } = await supabase
        .from('players')
        .select('*')
        .in('userid', userIds);
      if (error) throw error;
      allPlayers = players || [];
    }

    const playerIds = allPlayers.map(p => p.userid);
    const playcountCache = new Map();

    for (const userid of playerIds) {
      try {
        const { data: player } = await supabase
          .from('players')
          .select('*')
          .eq('userid', userid)
          .single();

        if (!player) {
          console.warn(`–ò–≥—Ä–æ–∫ —Å userid ${userid} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }
        const { data: ppData } = await supabase
          .from('history')
          .select('date, data')
          .order('date', { ascending: true });
        const ppHistoryRaw = ppData || [];

        let ppParticipations = 0;
        let ppWins = 0;
        let ppTotalPoints = 0;
        let ppBestPosition = Infinity;
        let currentEloPP = player.elo_pp_cup || 1000;

        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º PP –¥–ª—è ${player.nickname} (${userid})`);

        for (const tournament of ppHistoryRaw) {
          const participants = tournament.data || [];
          
          const playerEntry = participants.find(p => {
            const pUserId = p.userid?.toString().trim();
            const targetUserId = userid.toString().trim();
            const pNick = (p.nickname || '').toLowerCase().trim();
            const playerNick = (player.nickname || '').toLowerCase().trim();
            return pUserId === targetUserId || pNick === playerNick;
          });
          
          if (playerEntry) {
            ppParticipations++;
            const position = parseInt(playerEntry.position) || Infinity;
            ppTotalPoints += parseFloat(playerEntry.points || 0);
            ppBestPosition = Math.min(ppBestPosition, position);
            
            if (playerEntry.elo_after !== undefined && playerEntry.elo_after !== null) {
              currentEloPP = parseFloat(playerEntry.elo_after);
            }

            participants.sort((a, b) => (a.position || Infinity) - (b.position || Infinity));

            let winnerUserid = null;
            let winnerNickname = null;

            for (const entry of participants) {
              const entryUserid = entry.userid?.toString().trim();
              const entryPosition = parseInt(entry.position) || Infinity;

              let playcount = 0;
              if (entry.playcount !== undefined) playcount = parseFloat(entry.playcount);
              else if (entry.statistics && entry.statistics.play_count !== undefined) playcount = parseFloat(entry.statistics.play_count);
              else if (entry['play_count'] !== undefined) playcount = parseFloat(entry['play_count']);

              let finalPlaycount = playcount;
              let isBanned = false;

              if ((playcount === 0 || isNaN(playcount)) && parseFloat(entry.ppstart || 0) > 0) {
                if (playcountCache.has(entryUserid)) {
                  finalPlaycount = playcountCache.get(entryUserid);
                  console.log(`  üóÑ –ö—ç—à: playcount –¥–ª—è ${entry.nickname} = ${finalPlaycount}`);
                } else {
                  try {
                    const token = await getOsuAccessToken();
                    const osuRes = await axios.get(
                      `https://osu.ppy.sh/api/v2/users/${entryUserid}/osu`,
                      { headers: { Authorization: `Bearer ${token}` } }
                    );
                    finalPlaycount = parseFloat(osuRes.data.statistics?.play_count) || 0;
                    playcountCache.set(entryUserid, finalPlaycount);
                    console.log(`  üîÑ API: playcount –¥–ª—è ${entry.nickname} –±—ã–ª ${playcount}, —Ç–µ–ø–µ—Ä—å ${finalPlaycount}`);
                  } catch (apiErr) {
                    isBanned = true;
                    finalPlaycount = 0; 
                    playcountCache.set(entryUserid, 0);
                    console.warn(`  ‚ö†Ô∏è –ó–∞–±–∞–Ω–µ–Ω? ${entry.nickname} (${entryUserid}). Playcount=0`);
                  }
                }
              }

              const ppStart = parseFloat(entry.ppstart) || 0;
              const isQualified = ppStart >= 4000 && finalPlaycount >= 30000;

              console.log(`    –ö–∞–Ω–¥–∏–¥–∞—Ç ${entry.nickname} (pos ${entryPosition}): PP=${ppStart}, Play=${finalPlaycount}${isBanned ? ' (banned)' : ''}, Qual=${isQualified}`);

              if (isQualified) {
                winnerUserid = entryUserid;
                winnerNickname = entry.nickname;
                break; 
              }
            }
            if (winnerUserid && winnerUserid === userid.toString().trim()) {
              ppWins++;
              console.log(`  üèÜ –ü–û–ë–ï–î–ê –¥–ª—è ${player.nickname} –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournament.date}! (–ø–µ—Ä–≤—ã–π –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)`);
            } else if (winnerUserid) {
              console.log(`  –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ ${tournament.date}: ${winnerNickname} (–Ω–µ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫)`);
            } else {
              console.log(`  –ù–µ—Ç –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournament.date}`);
            }
          }
        }

        console.log(`üìä –ò–¢–û–ì–û PP –¥–ª—è ${player.nickname}: —É—á–∞—Å—Ç–∏–π=${ppParticipations}, –ø–æ–±–µ–¥=${ppWins}, best_pos=${ppBestPosition === Infinity ? 'N/A' : ppBestPosition}`);

        const { data: poolData } = await supabase
          .from('pool_history')
          .select('*')
          .order('tournament_date', { ascending: true });
        const poolHistory = poolData || [];

        let poolParticipations = 0;
        let poolWins = 0;
        let poolTotalPP = 0;
        let poolBestPosition = Infinity;
        let currentEloPool = player.elo_pool_cup || 1000;

        for (const entry of poolHistory) {
          const entryUserId = entry.userid?.toString().trim();
          const targetUserId = userid.toString().trim();
          const entryNick = (entry.nickname || '').trim().toLowerCase();
          const playerNick = (player.nickname || '').trim().toLowerCase();
          
          if ((entryUserId === targetUserId || entryNick === playerNick) && 
              entry.position !== undefined && entry.position !== null) {
            poolParticipations++;
            
            if (entry.position === 1) {
              poolWins++;
            }
            
            poolTotalPP += parseFloat(entry.total_pp || 0);
            poolBestPosition = Math.min(poolBestPosition, parseInt(entry.position));
            
            if (entry.elo_after !== undefined && entry.elo_after !== null) {
              currentEloPool = parseFloat(entry.elo_after);
            }
          }
        }

        const needsUpdate = 
          player.total_participations_pp !== ppParticipations ||
          player.wins_pp !== ppWins ||
          player.total_participations_pool !== poolParticipations ||
          player.wins_pool !== poolWins ||
          Math.abs((player.elo_pp_cup || 1000) - currentEloPP) > 0.01 ||
          Math.abs((player.elo_pool_cup || 1000) - currentEloPool) > 0.01;

        if (needsUpdate) {
          await supabase
            .from('players')
            .update({
              elo_pp_cup: Math.round(currentEloPP),
              total_participations_pp: ppParticipations,
              wins_pp: ppWins,
              total_points_pp: Math.round(ppTotalPoints),
              best_position_pp: ppBestPosition === Infinity ? null : ppBestPosition,
              elo_pool_cup: Math.round(currentEloPool),
              total_participations_pool: poolParticipations,
              wins_pool: poolWins,
              total_pp_pool: Math.round(poolTotalPP),
              best_position_pool: poolBestPosition === Infinity ? null : poolBestPosition
            })
            .eq('userid', userid);

          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${player.nickname}: PP –ø–æ–±–µ–¥=${ppWins}, Pool –ø–æ–±–µ–¥=${poolWins}`);
        }

      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${userid}:`, err);
      }
    }

    console.log(`‚úÖ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${playerIds.length} –∏–≥—Ä–æ–∫–æ–≤`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ verifyAndFixPlayerStats:', err);
  }
}

app.get('/api/debug/history-structure', async (req, res) => {
  try {
    const { data: ppData } = await supabase
      .from('history')
      .select('date, data')
      .limit(3); 

    const analysis = ppData.map(t => {
      const sampleParticipant = t.data?.[0];
      return {
        date: t.date,
        participantKeys: sampleParticipant ? Object.keys(sampleParticipant) : [],
        hasPlaycount: !!sampleParticipant?.playcount,
        hasStatistics: !!sampleParticipant?.statistics,
        playcountValue: sampleParticipant?.playcount,
        statisticsPlaycount: sampleParticipant?.statistics?.play_count
      };
    });

    res.json({ 
      success: true, 
      analysis,
      message: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
app.get('/fix-stats', async (req, res) => {
  try {
    console.log('üîß –ù–ê–ß–ê–¢ –ü–ï–†–ï–°–ß–ï–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò –í–°–ï–• –ò–ì–†–û–ö–û–í (public)...');
    
    const startTime = Date.now();
    await verifyAndFixPlayerStats();
    const duration = Date.now() - startTime;
    
    const clearedKeys = cache.keys().filter(key => 
      key.startsWith('profile_') || key === 'all_players'
    );
    clearedKeys.forEach(key => cache.del(key));
    
    console.log(`‚úÖ –ü–ï–†–ï–°–ß–ï–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ó–ê–í–ï–†–®–ï–ù –∑–∞ ${duration}ms! –û—á–∏—â–µ–Ω–æ –∫–ª—é—á–µ–π –∫—ç—à–∞: ${clearedKeys.length}`);
    
    res.json({ 
      success: true,
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞!',
      timestamp: new Date().toISOString(),
      duration_ms: duration,
      cleared_cache_keys: clearedKeys.length
    });
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ü–ï–†–ï–°–ß–ï–¢–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
});


fetchOsuAccessToken().then(() => {
  updateParticipantsPP();
  setInterval(updateParticipantsPP, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
});
fetchOsuAccessToken().then(() => {
  updatePoolPP();
  setInterval(updatePoolPP, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
});




// CRON: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ø –∫–∞–ø–∞ –∏ –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
cron.schedule("0 0 * * 0", async () => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –∏ –∑–∞–ø–∏—à–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ participants
    await updatePositionsInDB();

    // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–∂–µ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–∑–∏—Ü–∏–∏ ASC
    const { data: participants, error: fetchErr } = await supabase
      .from('participants')
      .select('*')
      .order('position', { ascending: true });

    if (fetchErr) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏:', fetchErr);
      return;
    }

    if (!participants || participants.length === 0) {
      console.log('–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî –∏—Å—Ç–æ—Ä–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
      return;
    }

    // –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ (—Å –¥–∞—Ç–æ–π)
    const historyRow = {
      date: new Date().toISOString(),
      data: participants
    };

    const { error: insertErr } = await supabase.from("history").insert([historyRow]);
    if (insertErr) {
      console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ history:', insertErr);
      return;
    }

    // –û—á–∏—Å—Ç–∏–º —Ç–∞–±–ª–∏—Ü—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const { error: deleteErr } = await supabase.from("participants").delete().neq("userid", 0);
    if (deleteErr) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ participants –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', deleteErr);
      return;
    }
    const { error: deleteErr1 } = await supabase.from("participant_scores").delete().neq("id", 0);
    if (deleteErr1) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ participant_scores –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', deleteErr1);
      return;
    }

    console.log("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ —Ç–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω–∞");
  } catch (err) {
    console.error('CRON error:', err);
  }
}, { timezone: "Europe/Moscow" });

// –†–æ—É—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
app.get('/api/history', async (req, res) => {
  try {
    const { data, error } = await supabase.from("history").select("*").order("date", { ascending: false });
    if (error) return res.status(500).json({ error: error.message });
    res.json(data);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /api/history:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.get("/history", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "history.html"));
});

app.post('/api/participate', async (req, res) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (!req.session.user) {
    return res.status(401).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!' });
  }

  const user = req.session.user;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ
  const { data: exists, error: checkErr } = await supabase
    .from("participants")
    .select("userid")
    .eq("userid", user.id)
    .maybeSingle();

  if (checkErr) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–∏—è:', checkErr);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
  }

  if (exists) {
    return res.status(400).json({ error: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ!' });
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è osu! API
    const token = await getOsuAccessToken();

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
    const resOsu = await axios.get(`https://osu.ppy.sh/api/v2/users/${user.id}/osu`, {
      headers: { Authorization: `Bearer ${token}` }
    });

    const ppStart = resOsu.data.statistics.pp || 0;

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const newEntry = {
      userid: user.id,
      avatar: user.avatar_url || '',
      nickname: user.username,
      ppstart: Number(ppStart),
      ppend: ppStart,
      points: 0,
      participation_date: new Date().toISOString(),
      position: null // –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ
    };

    // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
    const { error } = await supabase.from("participants").insert([newEntry]);
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
      return res.status(500).json({ error: error.message });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await updatePositionsInDB();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.json({ success: true, participant: newEntry });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err.response?.data || err.message);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ osu! API" });
  }
});

app.get('/api/participant/:userid/scores', async (req, res) => {
  const userid = req.params.userid;
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —É—á–∞—Å—Ç–∏—è –∏–∑ participants
    const { data: participant, error: pErr } = await supabase
      .from('participants')
      .select('userid, nickname, participation_date')
      .eq('userid', userid)
      .maybeSingle();

    if (pErr) {
      console.error('participant fetch error', pErr);
      return res.status(500).json({ error: pErr.message });
    }

    if (!participant) {
      return res.status(404).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const joinDate = participant.participation_date || null;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –µ–≥–æ —Å–∫–æ—Ä—ã –∏–∑ participant_scores
    let query = supabase
      .from('participant_scores')
      .select(`
        id,
        score_pp,
        score_id,
        pp_gain,
        created_at,
        beatmap_id,
        beatmap_title,
        beatmap_version,
        beatmap_bg
      `)
      .eq('userid', userid);

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ participation_date
    if (joinDate) {
      query = query.gte('created_at', joinDate);
    }

    const { data, error } = await query.order('created_at', { ascending: false });

    if (error) {
      console.error('scores fetch error', error);
      return res.status(500).json({ error: error.message });
    }

    res.json(data || []);
  } catch (err) {
    console.error('unexpected error:', err);
    res.status(500).json({ error: err.message });
  }
});

// ========== pool endpoints (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ) ==========
// –£—á–∞—Å—Ç–∏–µ –≤ –ø—É–ª–µ –∫–∞—Ä—Ç
app.get("/api/pool/history", async (req, res) => {
  try {
    // –ë–µ—Ä—ë–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ pool_history
    const { data: rows, error } = await supabase
      .from("pool_history")
      .select("*")
      .order("tournament_date", { ascending: false })
      .order("position", { ascending: true });

    if (error) throw error;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç—É—Ä–Ω–∏—Ä–∞–º
    const historyMap = {};
    rows.forEach(row => {
      if (!historyMap[row.tournament_date]) {
        historyMap[row.tournament_date] = [];
      }
      historyMap[row.tournament_date].push({
        position: row.position,
        avatar_url: row.avatar_url,
        nickname: row.nickname,
        total_pp: row.total_pp,
        scores: row.scores || []
      });
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
    const history = Object.keys(historyMap).map(date => ({
      tournament_date: date,
      data: historyMap[date]
    }));

    res.json(history);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–ª –∫–∞–ø–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–ª –∫–∞–ø–∞" });
  }
});

app.get('/pool', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'pool.html'));
});

app.get('/api/pool/maps', async (req, res) => {
  try {
    // –ë–µ—Ä–µ–º –∫–∞—Ä—Ç—ã –∏–∑ –ø—É–ª–∞
    const { data: maps, error: mapsError } = await supabase
      .from('pool_maps')
      .select('id, beatmap_id, title, background_url, map_url, difficulty_id')
      .order('id', { ascending: true });

    if (mapsError) return res.status(500).json({ error: mapsError.message });
    if (!maps || maps.length === 0) return res.json([]);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª—É—á—à–∏–µ PP —Å—Ä–∞–∑—É –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const { data: bestScores, error: scoresError } = await supabase
      .from('player_scores')
      .select('map_id, pp')
      .in('map_id', maps.map(m => m.id))
      .order('pp', { ascending: false });

    if (scoresError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–æ—Ä–æ–≤:', scoresError.message);
      return res.status(500).json({ error: scoresError.message });
    }

    // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã —Å –∏—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º PP
    const bestPPMap = {};
    bestScores.forEach(s => {
      if (!bestPPMap[s.map_id] || s.pp > bestPPMap[s.map_id]) {
        bestPPMap[s.map_id] = Math.round(s.pp);
      }
    });

    const mapsWithBest = maps.map(m => ({
      ...m,
      best_score_pp: bestPPMap[m.id] || 0
    }));

    res.json(mapsWithBest);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /api/pool/maps:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.get('/api/scores/:id', async (req, res) => {
  try {
    const { data, error } = await supabase
      .from('player_scores')
      .select(`
        id, userid, score_id, score_pp, accuracy, mods,
        max_combo, statistics, created_at,
        beatmap_id, beatmapset_id, beatmap_version, beatmap_bg
      `)
      .eq('id', req.params.id)
      .single();

    if (error) return res.status(500).json({ error: error.message });

    // –ø–æ–¥—Ç—è–Ω—É—Ç—å –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞
    const { data: user } = await supabase
      .from('participants')
      .select('nickname')
      .eq('userid', data.userid)
      .maybeSingle();

    res.json({ ...data, username: user?.nickname || 'Unknown' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /api/scores/:id', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

async function updatePoolPP() {
  try {
    const token = await getOsuAccessToken();

    // 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const { data: participants, error: pErr } = await supabase
      .from("pool_participants")
      .select("id, userid, nickname, participation_date");

    if (pErr) throw pErr;
    if (!participants?.length) {
      console.log("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
      return;
    }

    // 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –ø—É–ª–∞
    const { data: maps, error: mErr } = await supabase
      .from("pool_maps")
      .select("id, difficulty_id, title");
    if (mErr) throw mErr;
    if (!maps?.length) {
      console.log("–ù–µ—Ç –∫–∞—Ä—Ç –≤ –ø—É–ª–µ.");
      return;
    }

    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PP –¥–ª—è ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...`);

    // 3Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    for (const participant of participants) {
      const participationDate = new Date(participant.participation_date);
      let totalPP = 0;

      for (const map of maps) {
        const difficultyId = map.difficulty_id;
        let bestPP = 0;
        let bestScoreId = null;

        try {
          // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–∫–æ—Ä–´ –∏–≥—Ä–æ–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
          const scoreRes = await axios.get(
            `https://osu.ppy.sh/api/v2/beatmaps/${difficultyId}/scores/users/${participant.userid}/all`,
            { headers: { Authorization: `Bearer ${token}` } }
          );

          let candidates = Array.isArray(scoreRes.data)
            ? scoreRes.data
            : scoreRes.data?.scores || [];

          // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–æ—Ä—ã –ø–æ—Å–ª–µ –¥–∞—Ç—ã —É—á–∞—Å—Ç–∏—è
          candidates = candidates.filter((s) => {
            if (!s?.created_at) return false;
            return new Date(s.created_at) >= participationDate;
          });

          if (candidates.length > 0) {
            // –ù–∞—Ö–æ–¥–∏–º —Å–∫–æ—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º PP
            const bestScore = candidates.reduce((max, s) =>
              (s.pp || 0) > (max.pp || 0) ? s : max
            );

            bestPP = Number(bestScore.pp || 0);
            bestScoreId = bestScore.id || null;
          }
        } catch (e) {
          console.warn(
            `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–∞—Ä—Ç—ã ${map.id}, –∏–≥—Ä–æ–∫ ${participant.nickname}:`,
            e.response?.data || e.message
          );
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ player_scores
        const { data: existing, error: existingErr } = await supabase
          .from("player_scores")
          .select("id")
          .eq("participant_id", participant.id)
          .eq("map_id", map.id)
          .maybeSingle();

        if (existingErr) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫–æ—Ä–∞:", existingErr);
          continue;
        }

        if (existing) {
          // –æ–±–Ω–æ–≤–ª—è–µ–º
          await supabase
            .from("player_scores")
            .update({
              pp: bestPP,
              score_id: bestScoreId,
            })
            .eq("id", existing.id);
        } else {
          // –≤—Å—Ç–∞–≤–ª—è–µ–º
          await supabase.from("player_scores").insert({
            participant_id: participant.id,
            map_id: map.id,
            pp: bestPP,
            score_id: bestScoreId,
          });
        }

        totalPP += bestPP;
      }

      // 4Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π PP –≤ —Ç–∞–±–ª–∏—Ü–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      await supabase
        .from("pool_participants")
        .update({ total_pp: totalPP })
        .eq("id", participant.id);

      console.log(`‚úÖ ${participant.nickname} –æ–±–Ω–æ–≤–ª—ë–Ω (totalPP: ${totalPP.toFixed(2)})`);
    }

    console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PP –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ updatePoolPP:", err);
  }
}



cron.schedule("1 0 * * *", async () => {
  const startDate = new Date("2025-10-20T00:00:00+03:00"); // –±–ª–∏–∂–∞–π—à–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ Moscow TZ
  const today = new Date();
  today.setHours(0, 0, 0, 0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω—è
  
  const diffDays = Math.floor((today - startDate) / (1000 * 60 * 60 * 24));

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ (—á–µ—Ç–Ω—ã–µ –¥–Ω–∏: 0, 2, 4...)
  if (diffDays < 0 || diffDays % 2 !== 0) {
    console.log(`‚è≠Ô∏è CRON –ø—Ä–æ–ø—É—â–µ–Ω: ${today.toISOString().split('T')[0]} (diffDays=${diffDays})`);
    return;
  }

  console.log(`üöÄ CRON –∑–∞–ø—É—â–µ–Ω: –¥–µ–Ω—å ${diffDays} –æ—Ç 20.10.2025`);

  try {
    console.log("=== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–ª–∞ ===");

    // 1) –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É–ª–∞
    const { data: participants, error: pErr } = await supabase
      .from("pool_participants")
      .select("*")
      .order("total_pp", { ascending: false });

    if (pErr) throw pErr;
    if (!participants || participants.length === 0) {
      console.log("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.");
      return;
    }

    // 2) –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ø—É–ª–∞ –∑–∞—Ä–∞–Ω–µ–µ
    const { data: allMaps, error: mapsErr } = await supabase
      .from("player_scores")
      .select(`
        id,
        participant_id,
        map_id,
        pp,
        pool_maps (
          difficulty_id,
          beatmap_id,
          title,
          map_url,
          background_url
        )
      `);

    if (mapsErr) throw mapsErr;

    // 3) –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
    for (const [index, p] of participants.entries()) {
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
      const scores = (allMaps || []).filter(s => s.participant_id === p.id);

      const formattedScores = (scores || []).map(s => ({
        pp: Number(s.pp) || 0,
        map_id: s.map_id,
        score_id: s.score_id || null,
        difficulty_id: s.pool_maps?.difficulty_id || null,
        beatmap_id: s.pool_maps?.beatmap_id || null,
        title: s.pool_maps?.title || null,
        map_url: s.pool_maps?.map_url || null,
        background_url: s.pool_maps?.background_url || null
      }));
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ pool_history
      const { error: insertErr } = await supabase.from("pool_history").insert({
        tournament_date: new Date().toISOString().split("T")[0],
        position: index + 1,
         // –î–æ–±–∞–≤–ª—è–µ–º userid
        avatar_url: p.avatar,
        nickname: p.nickname,
        total_pp: p.total_pp,
        scores: formattedScores
      });

      if (insertErr) console.error(`–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è ${p.nickname}:`, insertErr);
    }

    console.log("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø—É–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!");

    // 4) –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
    await supabase.from("pool_participants").delete().neq("id", 0);
    await supabase.from("player_scores").delete().neq("id", 0);
    await supabase.from("pool_maps").delete().neq("id", 0);

    console.log("–ü—É–ª –∏ –∫–∞—Ä—Ç—ã –æ—á–∏—â–µ–Ω—ã.");

    try {
      // 1. –ó–∞–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ test_pool_maps
      const { data: rows, error: fetchError } = await supabase
        .from('test_pool_maps')
        .select('*');

      if (fetchError) throw fetchError;
      if (!rows.length) {
        console.log('–ù–µ—Ç —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è');
        return;
      }

      // 2. –í—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ pool_maps
      const { error: insertError } = await supabase
        .from('pool_maps')
        .insert(rows);

      if (insertError) throw insertError;
     
      console.log(`‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫`);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:', err.message || err);
    }

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ CRON —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–ª–∞:", err.response?.data || err.message || err);
  }

  try {
    console.log('–ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤');
    await syncPlayersFromHistories().catch(console.error);
    await updateEloFromHistory().catch(console.error);
    
    const token = await getOsuAccessToken();
    if (!token) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å osu! —Ç–æ–∫–µ–Ω');
      return;
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    const { error: deleteError, data: deletedData } = await supabase
      .from('test_pool_maps')
      .delete()
      .neq('id', 0);
    if (deleteError) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', deleteError.message);
      throw deleteError;
    }
    console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${deletedData.length} –∑–∞–ø–∏—Å–µ–π`);

    console.log("–ù–∞—á–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–ª–∞ –∫–∞—Ä—Ç");
    let count = 0;
    let attempts = 0;
    const maxAttempts = 10000;

    while (count < 5 && attempts < maxAttempts) {
      attempts++;
      const randomSetId = Math.floor(Math.random() * 2300000) + 1;
      try {
        const resApi = await axios.get(`https://osu.ppy.sh/api/v2/beatmapsets/${randomSetId}`, {
          headers: { Authorization: `Bearer ${token}` },
          timeout: 10000
        });
        const set = resApi.data;

        if (!set || !set.beatmaps || !Array.isArray(set.beatmaps)) {
          console.warn(`‚ö†Ô∏è –°–µ—Ç ${randomSetId} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö beatmaps, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        if (set.status !== "ranked") continue;

        const validDiffs = set.beatmaps.filter(
          bm => bm.mode === "osu" && 
                typeof bm.difficulty_rating === 'number' && 
                bm.difficulty_rating >= 6 && bm.difficulty_rating <= 8
        );

        if (validDiffs.length > 0) {
          const map = validDiffs[Math.floor(Math.random() * validDiffs.length)];

          const insertData = [{
            beatmap_id: set.id || null,
            difficulty_id: map.id || null,
            title: `${set.title || 'Unnamed'} [${map.version || 'Unknown'}]`,
            background_url: set.covers?.cover || null,
            map_url: `https://osu.ppy.sh/beatmaps/${map.id || 0}`
          }];

          const { error: insertError, data: insertedData } = await supabase
            .from("test_pool_maps")
            .insert(insertData);

          if (insertError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã ${map.id}:`, insertError.message, insertData);
            continue;
          }

          if (insertedData && insertedData.length > 0) {
            console.log(`üéµ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞: ${insertData[0].title} (ID: ${insertedData[0].id})`);
            count++;
          } else {
            console.warn(`‚ö†Ô∏è –í—Å—Ç–∞–≤–∫–∞ –∫–∞—Ä—Ç—ã ${map.id} –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –æ—à–∏–±–∫–∏ –Ω–µ—Ç`);
          }
        }
      } catch (err) {
        console.warn(`–ü—Ä–æ–ø—É—â–µ–Ω —Å–µ—Ç ${randomSetId}:`, err.message);
        if (err.response?.status === 429) {
          console.log('‚è≥ Rate limit, –ø–∞—É–∑–∞ 5 —Å–µ–∫...');
          await new Promise(resolve => setTimeout(resolve, 5000));
        }
        continue;
      }
    }

    const { data: generatedMaps, error: fetchError } = await supabase
      .from('test_pool_maps')
      .select('*');
    if (fetchError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã:', fetchError.message);
      throw fetchError;
    }

    console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${count}/5 –∫–∞—Ä—Ç, –≤ –±–∞–∑–µ: ${generatedMaps.length} –∑–∞–ø–∏—Å–µ–π`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ CRON –∑–∞–¥–∞—á–µ:', err.message || err);
  }
}, { timezone: "Europe/Moscow" });

// === –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–û–£–¢ –î–õ–Ø –ü–ï–†–ï–°–ß–ï–¢–ê –ü–û–ë–ï–î ===


// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É–ª–∞
app.get('/api/pool/participants', async (req, res) => {
  try {
    const { data, error } = await supabase
      .from('pool_participants')
      .select(`
        id,
        userid,
        nickname,
        avatar,
        total_pp,
        player_scores (
          pp,
          score_id,
          pool_maps (
            id,
            beatmap_id,
            title,
            background_url,
            map_url
          )
        )
      `);

    if (error) throw error;
        
    res.json(data);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞ (–≤ –ø—É–ª–µ)
app.get('/api/pool/player/:id', async (req, res) => {
  const { id } = req.params;

  const { data, error } = await supabase
    .from("player_scores")
    .select("id, score_id, pp, pool_maps(title, background_url, map_url)")
    .eq("participant_id", id)
    .order('pp', { ascending: false });

  if (error) return res.status(500).json({ error: error.message });
  res.json(data);
});

// === API –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ ===
app.get('/api/data', async (req, res) => {
  try {
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await updatePositionsInDB();

    // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const { data: participants, error } = await supabase
      .from('participants')
      .select('*')
      .order('position', { ascending: true });

    if (error) return res.status(500).json({ error: error.message });

    const token = await getOsuAccessToken();

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º playcount, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    const updatedParticipants = await Promise.all(
      participants.map(async (p) => {
        if (p.playcount && p.playcount > 0) {
          // –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å playcount ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
          return p;
        }

        try {
          const resUser = await axios.get(
            `https://osu.ppy.sh/api/v2/users/${p.userid}/osu`,
            { headers: { Authorization: `Bearer ${token}` } }
          );

          const playcount = resUser.data.statistics.play_count || 0;

          // —Å–æ—Ö—Ä–∞–Ω—è–µ–º playcount –≤ Supabase
          const { error: updateErr } = await supabase
            .from('participants')
            .update({ playcount })
            .eq('userid', p.userid);

          if (updateErr) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è playcount –¥–ª—è ${p.nickname}:`, updateErr.message);
          }

          return { ...p, playcount };
        } catch (err) {
          console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ playcount –¥–ª—è ${p.nickname}:`, err.message);
          return { ...p, playcount: 0 };
        }
      })
    );

    // 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    res.json(updatedParticipants);
  } catch (err) {
    console.error('/api/data error:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.get('/api/me', (req, res) => {
  if (!req.session.user) return res.status(401).json({ error: 'Not logged in' });
  res.json(req.session.user);
});

// === OAuth: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
app.get('/auth/login', (req, res) => {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π URL –≤ —Å–µ—Å—Å–∏–∏
  req.session.returnTo = req.headers.referer || '/';
  const authUrl = `https://osu.ppy.sh/oauth/authorize?client_id=${osuClientId}&redirect_uri=${encodeURIComponent(redirectUri)}&response_type=code&scope=public&state=${encodeURIComponent(JSON.stringify({ type: 'main', returnTo: req.session.returnTo }))}`;
  res.redirect(authUrl);
});

app.get('/pool/auth/login', (req, res) => {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π URL –≤ —Å–µ—Å—Å–∏–∏
  req.session.returnTo = req.headers.referer || '/pool';
  const authUrl = `https://osu.ppy.sh/oauth/authorize?client_id=${osuClientId}&redirect_uri=${encodeURIComponent(redirectUri)}&response_type=code&scope=public&state=${encodeURIComponent(JSON.stringify({ type: 'pool', returnTo: req.session.returnTo }))}`;
  res.redirect(authUrl);
});

app.get('/auth/callback', async (req, res) => {
  const code = req.query.code;
  const state = req.query.state ? JSON.parse(decodeURIComponent(req.query.state)) : { type: 'main', returnTo: '/' };

  if (!code) return res.status(400).send('No code provided');

  try {
    const tokenResponse = await axios.post('https://osu.ppy.sh/oauth/token', {
      client_id: osuClientId,
      client_secret: osuClientSecret,
      code,
      grant_type: 'authorization_code',
      redirect_uri: redirectUri,
    });

    const accessToken = tokenResponse.data.access_token;

    const userResponse = await axios.get('https://osu.ppy.sh/api/v2/me', {
      headers: { Authorization: `Bearer ${accessToken}` },
    });

    req.session.user = userResponse.data;

    // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π URL –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const redirectTo = state.returnTo || (state.type === 'pool' ? '/pool' : '/');
    res.redirect(redirectTo);
  } catch (error) {
    console.error(error.response?.data || error.message);
    res.status(500).send('Authorization error');
  }
});

app.get('/api/profile/:userid', async (req, res) => {
  const { userid } = req.params;
  const cacheKey = `profile_${userid}`;
  const cached = cache.get(cacheKey);
  if (cached) {
    return res.json(cached);
  }

  try {
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Supabase –∏ osu! API
    const [playerRes, osuRes] = await Promise.all([
      supabase.from('players').select('*').eq('userid', userid).single(),
      axios.get(`https://osu.ppy.sh/api/v2/users/${userid}/osu`, {
        headers: { Authorization: `Bearer ${await getOsuAccessToken()}` },
      }).catch(err => {
        console.warn(`Osu API error for user ${userid}:`, err.message);
        return { data: { statistics: { pp: null }, country: { name: 'N/A' }, join_date: null } }; // Fallback –Ω–∞ null –¥–∞–Ω–Ω—ã–µ
      }),
    ]);

    const player = playerRes.data;
    if (playerRes.error || !player) {
      return res.status(404).json({ error: 'Player not found' });
    }

    const osuData = osuRes.data;

    // –ò—Å—Ç–æ—Ä–∏—è PP Cup –∏–∑ history
    const { data: ppHistoryRaw } = await supabase
      .from('history')
      .select('date, data')
      .order('date', { ascending: false });
    const ppHistory = ppHistoryRaw.reduce((acc, row) => {
      const userEntry = (row.data || []).find(p => 
        p.userid === Number(userid) || 
        p.userid == userid || 
        p.nickname === player.nickname
      );
      if (userEntry) {
        acc.push({
          date: row.date,
          position: userEntry.position,
          points: userEntry.points,
          elo_after: userEntry.elo_after || 'N/A',
        });
      }
      return acc;
    }, []);

    // –ò—Å—Ç–æ—Ä–∏—è Pool Cup
    const { data: poolHistoryRaw, error: poolErr } = await supabase
      .from('pool_history')
      .select('*')
      .order('tournament_date', { ascending: false });
    const poolHistory = poolErr
      ? []
      : poolHistoryRaw
          .filter(entry => 
            entry.userid == userid || 
            entry.userid === userid.toString() || 
            entry.nickname === player.nickname
          )
          .map(entry => ({
            tournament_date: entry.tournament_date,
            position: entry.position,
            total_pp: entry.total_pp,
            elo_after: entry.elo_after || 'N/A',
          }));

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const response = {
      ...player,
      current_pp: osuData.statistics?.pp || player.current_pp || 0, // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      playcount: osuData.statistics?.play_count || player.playcount || 0,
      country: osuData.country?.name || 'N/A',
      join_date: osuData.join_date || player.join_date || null,
      pp_history: ppHistory,
      pool_history: poolHistory,
    };
    cache.set(cacheKey, response);

    res.json(response);
  } catch (err) {
    console.error('/api/profile error:', err);
    if (!res.headersSent) {
      res.status(500).json({ error: 'Internal server error' });
    }
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
app.get('/api/players', async (req, res) => {
  try {
    const cacheKey = 'all_players';
    const cached = cache.get(cacheKey);
    if (cached) {
      return res.json(cached);
    }

    const { data: players, error: playersErr } = await supabase.from('players').select('*');
    if (playersErr) throw playersErr;

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º PP –∏–∑ osu! API
    const token = await getOsuAccessToken();
    const updatedPlayers = await Promise.all(players.map(async (player) => {
      try {
        const osuRes = await axios.get(`https://osu.ppy.sh/api/v2/users/${player.userid}/osu`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const currentPP = osuRes.data.statistics?.pp || 0; // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø
        return { ...player, current_pp: currentPP };
      } catch (err) {
        console.warn(`Osu API error for user ${player.userid}:`, err.message);
        return { ...player, current_pp: 0 }; // Fallback –Ω–∞ 0, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
      }
    }));

    cache.set(cacheKey, updatedPlayers, 600); // –ö—ç—à –Ω–∞ 10 –º–∏–Ω—É—Ç
    res.json(updatedPlayers);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.get('/players', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'players.html'));
});

app.get('/auth/logout', (req, res) => {
  req.session.destroy(err => {
    if (err) {
      console.error(err);
      return res.status(500).send('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞');
    }
    // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (referer) –∏–ª–∏ –∫–æ—Ä–µ–Ω—å, –µ—Å–ª–∏ referer –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    const redirectTo = req.headers.referer || '/';
    res.redirect(redirectTo);
  });
});

// === –£—á–∞—Å—Ç–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ ===
app.post('/api/pool/participate', async (req, res) => {
  if (!req.session.user) return res.status(401).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!' });

  const user = req.session.user;

  try {
    // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
    const { data: existing, error: checkError } = await supabase
      .from("pool_participants")
      .select("id")
      .eq("userid", user.id)
      .single();

    if (checkError && checkError.code !== 'PGRST116') throw checkError; // PGRST116 = –Ω–µ—Ç –∑–∞–ø–∏—Å–∏

    if (existing) {
      // –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å
      return res.status(400).json({ error: "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ!" });
    }

    // 2) –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const { data: participant, error: pError } = await supabase
      .from("pool_participants")
      .insert([{
        userid: user.id,
        nickname: user.username,
        avatar: user.avatar_url || '',
        total_pp: 0
      }])
      .select()
      .single();

    if (pError) throw pError;

    const participantId = participant.id;

    // 3) –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ø—É–ª–∞
    const { data: pool, error: poolError } = await supabase
      .from("pool_maps")
      .select("id");

    if (poolError) throw poolError;

    // 4) –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞—Ä—Ç
    const scoreRows = pool.map((map) => ({
      participant_id: participantId,
      map_id: map.id,
      pp: 0
    }));

    const { error: sError } = await supabase
      .from("player_scores")
      .insert(scoreRows);

    if (sError) throw sError;

    res.json({ success: true, participantId });

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /api/pool/participate:', err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞" });
  }
});

app.post('/api/unparticipate', async (req, res) => {
  if (!req.session.user) return res.status(401).json({ error: 'Not logged in' });
  const user = req.session.user;

  const { error } = await supabase.from("participants").delete().eq("userid", user.id);
  if (error) return res.status(500).json({ error: error.message });

  // –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
  await updatePositionsInDB();

  res.json({ success: true });
});

// === –§–£–ù–ö–¶–ò–ò ELO (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤) ===
async function updateEloFromHistory() {
  try {
    // –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ PP Cup (history)
    const { data: ppHistoryRaw, error: ppErr } = await supabase
      .from('history')
      .select('date, data')
      .order('date', { ascending: true });

    if (ppErr) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PP history:', ppErr);
      return;
    }

    // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ Pool Cup (pool_history)
    const { data: poolHistoryRaw, error: poolErr } = await supabase
      .from('pool_history')
      .select('*')
      .order('tournament_date', { ascending: true });

    if (poolErr) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Pool history:', poolErr);
      return;
    }

    // –®–∞–≥ 3: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ players –¥–ª—è —Ç–µ–∫—É—â–∏—Ö ELO/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const { data: allPlayers, error: playersErr } = await supabase.from('players').select('*');
    if (playersErr) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ players:', playersErr);
      return;
    }
    const playerMap = new Map(allPlayers.map(p => [p.userid, p]));

    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–µ—Å—Ç—å elo_after)
    const processedPPTournaments = new Set();
    for (const tournament of ppHistoryRaw) {
      const participants = tournament.data || [];
      const hasEloData = participants.some(p => p.elo_after !== undefined && p.elo_after !== null);
      if (hasEloData) {
        processedPPTournaments.add(tournament.date);
      }
    }

    const processedPoolTournaments = new Set();
    for (const entry of poolHistoryRaw) {
      if (entry.elo_after !== undefined && entry.elo_after !== null) {
        processedPoolTournaments.add(entry.tournament_date);
      }
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö PP —Ç—É—Ä–Ω–∏—Ä–æ–≤: ${processedPPTournaments.size}`);
    console.log(`–ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö Pool —Ç—É—Ä–Ω–∏—Ä–æ–≤: ${processedPoolTournaments.size}`);

    // –®–∞–≥ 5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï PP Cup —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    for (const tournament of ppHistoryRaw) {
      if (processedPPTournaments.has(tournament.date)) {
        console.log(`PP —Ç—É—Ä–Ω–∏—Ä ${tournament.date} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }

      const participants = tournament.data || [];
      if (!participants.length) continue;

      console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PP —Ç—É—Ä–Ω–∏—Ä ${tournament.date}`);
      const eloMap = await calculateEloForTournament('pp', participants, playerMap);

      // –û–±–Ω–æ–≤–ª—è–µ–º elo_after –≤ participants (–≤ data jsonb)
      participants.forEach(p => {
        if (p.userid) {
          p.elo_after = eloMap.get(p.userid);
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π data –æ–±—Ä–∞—Ç–Ω–æ –≤ history
      await supabase
        .from('history')
        .update({ data: participants })
        .eq('date', tournament.date);

      await updatePlayersFromTournament('pp', participants, eloMap, playerMap);
    }

    // –®–∞–≥ 6: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º pool_history –ø–æ –¥–∞—Ç–∞–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    const poolTournaments = new Map();
    for (const entry of poolHistoryRaw) {
      const date = entry.tournament_date;
      if (!poolTournaments.has(date)) poolTournaments.set(date, []);
      poolTournaments.get(date).push(entry);
    }

    for (const [date, participants] of poolTournaments) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ —É–∂–µ –∏–º–µ—é—Ç elo_after
      const allProcessed = participants.every(p => p.elo_after !== undefined && p.elo_after !== null);
      if (allProcessed && processedPoolTournaments.has(date)) {
        console.log(`Pool —Ç—É—Ä–Ω–∏—Ä ${date} —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }

      console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Pool —Ç—É—Ä–Ω–∏—Ä ${date}`);

      // –î–æ–±–∞–≤–ª—è–µ–º userid –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      for (const p of participants) {
        if (!p.userid) {
          const matchingPlayer = allPlayers.find(pl => pl.nickname === p.nickname);
          if (matchingPlayer) {
            p.userid = matchingPlayer.userid;
            // –°–æ—Ö—Ä–∞–Ω–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ pool_history
            await supabase.from('pool_history').update({ userid: p.userid }).eq('id', p.id);
          }
        }
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å userid
      const validParticipants = participants.filter(p => p.userid);
      if (!validParticipants.length) continue;

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ELO –¥–ª—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ ('pool')
      const eloMap = await calculateEloForTournament('pool', validParticipants, playerMap);

      // –û–±–Ω–æ–≤–ª—è–µ–º elo_after –≤ pool_history
      for (const p of validParticipants) {
        await supabase
          .from('pool_history')
          .update({ elo_after: eloMap.get(p.userid) })
          .eq('id', p.id);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º players
      await updatePlayersFromTournament('pool', validParticipants, eloMap, playerMap);
    }

    // –®–∞–≥ 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
    console.log('–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –í–°–ï–• —Ç—É—Ä–Ω–∏—Ä–æ–≤...');
    await verifyAndFixPlayerStats(allPlayers.map(p => p.userid));

    console.log('‚úÖ ELO –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–π (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã)');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ updateEloFromHistory:', err);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è: –†–∞—Å—á–µ—Ç ELO –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
async function calculateEloForTournament(type, participants, playerMap) {
  const eloField = type === 'pp' ? 'elo_pp_cup' : 'elo_pool_cup';
  const K = 320;
  const newEloMap = new Map();

  for (const playerA of participants) {
    const currentPlayer = playerMap.get(playerA.userid) || { [eloField]: 1000 };
    let currentEloA = currentPlayer[eloField] || 1000;
    let delta = 0;

    for (const playerB of participants) {
      if (playerA.userid === playerB.userid) continue;
      const eloB = (playerMap.get(playerB.userid)?.[eloField] || 1000);
      const E_a = 1 / (1 + Math.pow(10, (eloB - currentEloA) / 400));
      const scoreA = type === 'pp' ? (playerA.points || 0) : (playerA.total_pp || 0);
      const scoreB = type === 'pp' ? (playerB.points || 0) : (playerB.total_pp || 0);
      const S_a = (scoreA > scoreB) ? 1 : (scoreA === scoreB ? 0.5 : 0);
      delta += K * (S_a - E_a);
    }

    const newElo = Math.round(currentEloA + (delta / (participants.length - 1 || 1)));
    newEloMap.set(playerA.userid, newElo);
  }

  return newEloMap;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ players –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞
async function updatePlayersFromTournament(type, participants, eloMap, playerMap) {
  const eloField = type === 'pp' ? 'elo_pp_cup' : 'elo_pool_cup';
  const participationsField = type === 'pp' ? 'total_participations_pp' : 'total_participations_pool';
  const totalScoreField = type === 'pp' ? 'total_points_pp' : 'total_pp_pool';
  const bestPosField = type === 'pp' ? 'best_position_pp' : 'best_position_pool';
  const winsField = type === 'pp' ? 'wins_pp' : 'wins_pool';

  for (const playerA of participants) {
    const currentPlayer = playerMap.get(playerA.userid) || {
      [participationsField]: 0,
      [totalScoreField]: 0,
      [bestPosField]: null,
      [winsField]: 0,
      nickname: playerA.nickname,
      avatar_url: playerA.avatar_url || playerA.avatar
    };

    const newParticipations = currentPlayer[participationsField] + 1;
    const score = type === 'pp' ? (playerA.points || 0) : (playerA.total_pp || 0);
    const newTotalScore = currentPlayer[totalScoreField] + score;
    const newBestPos = currentPlayer[bestPosField] ? Math.min(currentPlayer[bestPosField], playerA.position || Infinity) : playerA.position;
    const newWins = currentPlayer[winsField] + (playerA.position === 1 ? 1 : 0);
    const newElo = eloMap.get(playerA.userid);

    const { error } = await supabase.from('players').upsert({
      userid: playerA.userid,
      nickname: currentPlayer.nickname,
      avatar_url: currentPlayer.avatar_url,
      [eloField]: newElo,
      [participationsField]: newParticipations,
      [totalScoreField]: newTotalScore,
      [bestPosField]: newBestPos,
      [winsField]: newWins
    }, { onConflict: 'userid' });

    if (error) console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è players –¥–ª—è ${playerA.userid}:`, error);

    // –û–±–Ω–æ–≤–ª—è–µ–º map –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    playerMap.set(playerA.userid, { 
      ...currentPlayer, 
      [eloField]: newElo, 
      [participationsField]: newParticipations, 
      [totalScoreField]: newTotalScore, 
      [bestPosField]: newBestPos, 
      [winsField]: newWins 
    });
  }
}
async function syncPlayersFromHistories() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏–≥—Ä–æ–∫–æ–≤...');

    // --- 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ history (PP –∫–∞–ø—ã)
    const { data: historyRows, error: histErr } = await supabase.from('history').select('data');
    if (histErr) throw histErr;

    const idsFromHistory = new Set();
    const nicksFromHistory = new Set();

    (historyRows || []).forEach(row => {
      const data = row?.data;
      if (!Array.isArray(data)) return;
      data.forEach(p => {
        const id = Number(p.userid || p.user_id || p.id);
        const nick = (p.nickname || p.username || '').trim();
        if (id && !Number.isNaN(id)) idsFromHistory.add(id);
        if (nick) nicksFromHistory.add(nick.toLowerCase());
      });
    });

    // --- 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ pool_history (Pool –∫–∞–ø—ã)
    const { data: poolRows, error: poolErr } = await supabase
      .from('pool_history')
      .select('nickname, avatar_url');
    if (poolErr) throw poolErr;

    const nicksFromPool = new Map();
    (poolRows || []).forEach(p => {
      const nick = (p.nickname || '').trim();
      if (nick) {
        nicksFromPool.set(nick.toLowerCase(), p.avatar_url || null);
      }
    });

    // --- 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    const { data: existingPlayers, error: existErr } = await supabase
      .from('players')
      .select('userid, nickname');
    if (existErr) throw existErr;

    const existingIds = new Set(existingPlayers.map(p => Number(p.userid)));
    const existingNicks = new Set(
      existingPlayers.map(p => (p.nickname || '').trim().toLowerCase())
    );

    // --- 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö
    const missingIds = [...idsFromHistory].filter(id => !existingIds.has(id));
    const missingNicknames = [
      ...new Set([...nicksFromHistory, ...nicksFromPool.keys()]),
    ].filter(n => !existingNicks.has(n));

    console.log(
      `üìä –ù–∞–π–¥–µ–Ω–æ ${missingIds.length} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ ID –∏ ${missingNicknames.length} –ø–æ nickname`
    );

    // --- 5. –°–æ–∑–¥–∞—ë–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const playersToInsert = [];
    const token = await getOsuAccessToken();

    // –°–Ω–∞—á–∞–ª–∞ ‚Äî –ø–æ ID (PP –∫–∞–ø)
    for (const id of missingIds) {
      try {
        const res = await axios.get(`https://osu.ppy.sh/api/v2/users/${id}/osu`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const u = res.data;
        playersToInsert.push({
          userid: Number(u.id),
          nickname: u.username,
          avatar_url: u.avatar_url || null,
          elo_pp_cup: 1000,
          elo_pool_cup: 1000,
        });
      } catch (err) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å osu –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è ID ${id}, —Å–æ–∑–¥–∞—ë–º –ø–æ –∑–∞–≥–ª—É—à–∫–µ`);
        playersToInsert.push({
          userid: Number(id),
          nickname: `Player_${id}`,
          avatar_url: null,
          elo_pp_cup: 1000,
          elo_pool_cup: 1000,
        });
      }
    }

    // –¢–µ–ø–µ—Ä—å ‚Äî –ø–æ nickname (Pool –∫–∞–ø)
    for (const nick of missingNicknames) {
      if (playersToInsert.find(p => p.nickname.toLowerCase() === nick)) continue;

      try {
        const res = await axios.get(
          `https://osu.ppy.sh/api/v2/users/${encodeURIComponent(nick)}/osu`,
          { headers: { Authorization: `Bearer ${token}` } }
        );
        const u = res.data;
        playersToInsert.push({
          userid: Number(u.id),
          nickname: u.username,
          avatar_url: u.avatar_url || nicksFromPool.get(nick) || null,
          elo_pp_cup: 1000,
          elo_pool_cup: 1000,
        });
      } catch {
        // —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –±–µ–∑ userid
        const fakeId =
          Math.abs(nick.split('').reduce((a, b) => a * 31 + b.charCodeAt(0), 7)) +
          Date.now() % 10000;
        playersToInsert.push({
          userid: fakeId,
          nickname: nick,
          avatar_url: nicksFromPool.get(nick) || null,
          elo_pp_cup: 1000,
          elo_pool_cup: 1000,
        });
        console.warn(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ "${nick}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ osu API ‚Äî —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ (id=${fakeId})`);
      }
    }

    // --- 6. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const seen = new Set();
    const uniquePlayers = playersToInsert.filter(p => {
      if (seen.has(p.userid)) return false;
      seen.add(p.userid);
      return true;
    });

    // --- 7. –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î
    if (uniquePlayers.length) {
      const { error: insErr } = await supabase
        .from('players')
        .upsert(uniquePlayers, { onConflict: 'userid' });
      if (insErr) throw insErr;

      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${uniquePlayers.length}`);
    } else {
      console.log('‚úÖ –í—Å–µ –∏–≥—Ä–æ–∫–∏ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.');
    }

    return {
      ok: true,
      inserted: uniquePlayers.length,
      missingById: missingIds.length,
      missingByNickname: missingNicknames.length,
    };
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ syncPlayersFromHistories:', err);
    return { ok: false, error: err.message || err.toString() };
  }
}



app.get('/profile/:userid', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'profile.html'));
});



// === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  // –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–µ–ª–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  setTimeout(() => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...');
    verifyAndFixPlayerStats();
  }, 5000);
});